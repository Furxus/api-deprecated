scalar Date
scalar Time
scalar DateTime
scalar DateTimeISO
scalar TimeZone
scalar Timestamp
scalar UtcOffset
scalar Duration
scalar ISO8601Duration
scalar LocalDate
scalar LocalTime
scalar LocalDateTime
scalar LocalEndTime
scalar EmailAddress
scalar NegativeFloat
scalar NegativeInt
scalar NonEmptyString
scalar NonNegativeFloat
scalar NonNegativeInt
scalar NonPositiveFloat
scalar NonPositiveInt
scalar PhoneNumber
scalar PositiveFloat
scalar PositiveInt
scalar PostalCode
scalar UnsignedFloat
scalar UnsignedInt
scalar URL
scalar BigInt
scalar Byte
scalar Long
scalar SafeInt
scalar UUID
scalar GUID
scalar Hexadecimal
scalar HexColorCode
scalar HSL
scalar HSLA
scalar IP
scalar IPv4
scalar IPv6
scalar ISBN
scalar JWT
scalar Latitude
scalar Longitude
scalar MAC
scalar Port
scalar RGB
scalar RGBA
scalar USCurrency
scalar JSON
scalar JSONObject
scalar ObjectID
scalar Void
scalar Currency
scalar IBAN
scalar DID
scalar CountryCode
scalar Locale
scalar RoutingNumber
scalar AccountNumber
scalar Cuid
scalar SemVer
scalar SESSN
scalar DeweyDecimal
scalar LCCSubclass
scalar IPCPatent
scalar Any

directive @inherits(type: String!) on OBJECT | INPUT_OBJECT

input SignupInput {
    username: String!
    email: String!
    password: String!
    confirmPassword: String!
    dateOfBirth: String!
}

input LoginInput {
    usernameOrEmail: String!
    password: String!
}

type User {
    id: String!
    username: String!
    email: EmailAddress!
    age: Int!
    dateOfBirth: Date!
    avatar: String
    banner: String
    globalName: String
    activity: Activity
    nickname: String
    bio: String
    createdAt: DateTime!
    createdTimestamp: Timestamp!
    updatedAt: DateTime!
    updatedTimestamp: Timestamp!
    servers: [Server]!
}

type Server {
    id: String!
    name: String!
    owner: User!
    members: [Member]!
    channels: [Channel]!
    roles: [Role]!
    createdAt: DateTime!
    createdTimestamp: Timestamp!
    updatedAt: DateTime!
    updatedTimestamp: Timestamp!
    icon: String
    description: String
}

type Member {
    id: String!
    user: User!
    server: Server!
    roles: [Role]!
    permissions: [String]!
    joinedAt: DateTime!
    joinedTimestamp: Timestamp!
    updatedAt: DateTime!
    updatedTimestamp: Timestamp!
}

type Role {
    id: String!
    name: String!
    hoisted: Boolean!
    mentionable: Boolean!
    permissions: [String]!
    server: Server!
    position: Int!
    color: String
    createdAt: DateTime!
    createdTimestamp: Timestamp!
    updatedAt: DateTime!
    updatedTimestamp: Timestamp!
}

type Channel {
    id: String!
    name: String!
    server: Server!
    messages: [Message]!
    type: String!
    topic: String
    position: Int!
    nsfw: Boolean!
    createdAt: DateTime!
    createdTimestamp: Timestamp!
    updatedAt: DateTime!
    updatedTimestamp: Timestamp!
}

type Message {
    id: String!
    content: String!
    channel: Channel!
    member: Member!
    server: Server!
    createdAt: DateTime!
    createdTimestamp: Timestamp!
    updatedAt: DateTime!
    updatedTimestamp: Timestamp!
}

type Activity {
    id: String!
    text: String!
    lastActive: DateTime!
    lastActiveTimestamp: Timestamp!
}

type Auth @inherits(type: "User") {
    token: JWT!
}

type Mutation {
    signupUser(input: SignupInput!): Boolean!
    loginUser(input: LoginInput!): Auth!

    # Server Mutations
    createServer(name: String!): Server!
    deleteServer(id: String!): Boolean!
    updateServer(
        id: String!
        propertyNames: [String!]!
        propertyValues: [Any!]!
    ): Server!

    # Channel Mutations
    createChannel(serverId: String!, name: String!): Channel!
    deleteChannel(serverId: String!, id: String!): Boolean!
    updateChannel(
        serverId: String!
        id: String!
        propertyNames: [String!]!
        propertyValues: [Any!]!
    ): Channel!

    # Message Mutations
    createMessage(
        serverId: String!
        channelId: String!
        content: String!
    ): Message!
    deleteMessage(serverId: String!, channelId: String!, id: String!): Boolean!
    updateMessage(
        serverId: String!
        channelId: String!
        id: String!
        content: String!
    ): Message!

    # User Mutations
    updateUser(
        id: String!
        propertyNames: [String!]!
        propertyValues: [Any!]!
    ): User!

    # Member Mutations
    addMember(serverId: String!, userId: String!): Member!
    removeMember(serverId: String!, userId: String!): Boolean!
    updateMember(
        serverId: String!
        userId: String!
        propertyNames: [String!]!
        propertyValues: [Any!]!
    ): Member!

    # Role Mutations
    createRole(serverId: String!, name: String!): Role!
    deleteRole(serverId: String!, id: String!): Boolean!
    updateRole(
        serverId: String!
        id: String!
        propertyNames: [String!]!
        propertyValues: [Any!]!
    ): Role!

    # Activity Mutations
    updateActivity(userId: String!, status: String, text: String): Activity!
}

type Query {
    apiStatus: Boolean

    # User Queries
    getUser(id: String!): User!
    getUsers: [User]!

    # Server Queries
    getServer(id: String!): Server!
    getServers: [Server]!

    # Channel Queries
    getChannel(serverId: String!, id: String!): Channel!
    getChannels(serverId: String!): [Channel]!

    # Message Queries
    getMessage(serverId: String!, channelId: String!, id: String!): Message!
    getMessages(serverId: String!, channelId: String!): [Message]!

    # Member Queries
    getMember(serverId: String!, userId: String!): Member!
    getMembers(serverId: String!): [Member]!

    # Role Queries
    getRole(serverId: String!, id: String!): Role!
    getRoles(serverId: String!): [Role]!

    # Activity Queries
    getActivity(userId: String!): Activity!

    # Auth Queries
    me: User!
}
